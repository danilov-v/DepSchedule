openapi: "3.0.0"
info:
  version: 0.1.0
  title: DepSchedule
security:
  - JWT: []
servers:
  - url: http://localhost:9006/api

tags:
  - name: event
    description: "Информация о событии (подразделение, дата начала, дата конца)"
  - name: eventType
    description: "Информация о типе событий (цвет, описание)"
  - name: unit
    description: "Информация о подразделении (название, уровень подразделения)"
  - name: eventDuration
    description: 'Информация о времени выполнения событий в каждом подразделении'
  - name: user
    description: 'Действия с пользователями системы'
  - name: period
    description: "Информация о периодах (High Level Section)"
  - name: calendar
    description: "Информация о календарях(Наименование, сдвиг оперативного времени) "
paths:
  /event:
    get:
      operationId: eventGet
      summary: Список событий
      tags:
        - event
      parameters:
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: Array of event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: eventPost
      summary: Создать событие
      tags:
        - event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventPost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /event/recentList:
    get:
      operationId: eventRecentList
      summary: Список последних событий
      tags:
        - event
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
      responses:
        200:
          description: Array of recent event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /event/{eventId}:
    put:
      operationId: eventPut
      summary: Редактировать существующее событие
      tags:
        - event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: eventDelete
      summary: Удалить существующее событие
      tags:
        - event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventType:
    get:
      operationId: eventTypeGet
      summary: Список типов событий
      tags:
        - eventType
      responses:
        200:
          description: Array of event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventTypeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: eventTypePost
      summary: Добавить тип события
      tags:
        - eventType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventTypePost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventType/{eventTypeId}:
    put:
      operationId: eventTypePut
      summary: Редактировать существующий тип события
      tags:
        - eventType
      parameters:
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventTypePut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: eventTypeDelete
      summary: Удалить существующий тип события
      tags:
        - eventType
      parameters:
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /unit:
    get:
      deprecated: true
      operationId: unitGet
      summary: Список подразделений
      tags:
        - unit
      responses:
        200:
          description: Array of unit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: unitPost
      summary: Создать подразделение
      tags:
        - unit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitPost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /unit/{unitId}:
    put:
      operationId: unitPut
      summary: Редактировать существующее подразделение
      tags:
        - unit
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: unitDelete
      summary: Удалить существующее подразделение
      tags:
        - unit
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /unit/tree:
    get:
      operationId: unitGetTree
      summary: Древовидный список подразделений со списком событий
      tags:
        - unit
      parameters:
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: Array of unit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitResponseTree"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventDuration:
    get:
      operationId: eventDurationGet
      summary: Получить время выполнения событий для подразделения
      tags:
        - eventDuration
      parameters:
        - name: unitId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventDurationResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventDuration/{unitId}/{eventTypeId}:
    put:
      operationId: eventDurationPut
      summary: Добавить/Редактировать существующее время выполнения события для подразделения
      tags:
        - eventDuration
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventDurationPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventDurationResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: eventDurationDelete
      summary: Удалить существующее время выполнения события для подразделения
      tags:
        - eventDuration
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /login:
    put:
      operationId: login
      summary: Вход пользователя в систему
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBaseReq'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /logout:
    put:
      operationId: logout
      summary: Выход пользователя из системы
      tags:
        - user
      responses:
        200:
          description: successful operation
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/register:
    post:
      deprecated: true
      operationId: register
      summary: Регистрация нового пользователя (Пока что не реализовано!)
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/{login}:
    put:
      deprecated: true
      operationId: userPut
      summary: Редактировать существующего пользователя (Пока что не реализовано!)
      tags:
        - user
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      deprecated: true
      operationId: userDelete
      summary: Удалить существующего пользователя (Пока что не реализовано!)
      tags:
        - user
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /period:
    get:
      operationId: periodGet
      summary: Список периодов
      tags:
        - period
      responses:
        200:
          description: Array of event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PeriodResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: periodPost
      summary: Добавить период
      tags:
        - period
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PeriodPost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeriodResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /period/{periodId}:
    put:
      operationId: periodPut
      summary: Редактировать существующие периоды
      tags:
        - period
      parameters:
        - name: periodId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PeriodPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeriodResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: periodDelete
      summary: Удалить существующий период
      tags:
        - period
      parameters:
        - name: periodId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /calendar/{calendarId}:
    get:
      operationId: calendarGetById
      summary: Получение информации о конкретном календаре
      tags:
        - calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      operationId: calendarPut
      summary: Редактировать информацию в конкретном календаре (Календарь автоматически становится активным)
      tags:
        - calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarBase'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: calendarDelete
      summary: Удалить информацию о календаре
      tags:
        - calendar
      parameters:
        - name: calendarId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /calendar:
    get:
      operationId: calendarGet
      summary: Получение информации о календарях
      tags:
        - calendar
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CalendarResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: calendarPost
      summary: Создать календарь (Календарь автоматически становится активным)
      tags:
        - calendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarBaseReq'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
  schemas:
    UnitBaseReq:
      required:
        - title
      properties:
        title:
          type: string
          minLength: 2
          description: "Название подразделения"
        flag:
          type: string
          description: "Путь к изображению флага"
        planned:
          type: boolean
          default: false
          description: "Планируемое подразделение? (true/false)"
        parentId:
          type: integer
          format: int64
          description: |
            Ссылка на подразделение верхнего уровня
            (для подразделения первого уровня не указывается!)
    #        unitLevel:
    #          $ref: "#/components/schemas/UnitLevel"
    UnitBase:
      properties:
        title:
          type: string
          minLength: 2
          description: "Название подразделения"
        flag:
          type: string
          description: "Путь к изображению флага"
        planned:
          type: boolean
          default: false
          description: "Планируемое подразделение? (true/false)"
        parentId:
          type: integer
          format: int64
          description: |
            Ссылка на подразделение верхнего уровня
            (для подразделения первого уровня не указывается!)
    #        unitLevel:
    #          $ref: "#/components/schemas/UnitLevel"
    UnitPost:
      allOf:
        - $ref: "#/components/schemas/UnitBaseReq"
    UnitPut:
      allOf:
        - $ref: "#/components/schemas/UnitBase"
    UnitResponse:
      required:
        - unitId
        - title
      #        - unitLevel
      allOf:
        - $ref: "#/components/schemas/UnitBaseReq"
        - properties:
            unitId:
              type: integer
              format: int64
    UnitResponseTree:
      description: "Узел дерева. Содержит информацию о подразделении"
      required:
        - unitId
        - title
      allOf:
        - $ref: "#/components/schemas/UnitBaseReq"
        - properties:
            unitId:
              type: integer
              format: int64
            events:
              type: array
              items:
                $ref: "#/components/schemas/EventResponse"
            childUnit:
              type: array
              items:
                $ref: "#/components/schemas/UnitResponseTree"
            eventDuration:
              $ref: "#/components/schemas/EventDurationMap"
    #    UnitLevel:
    #      type: integer
    #      format: int32
    #      description: |
    #        Уровень подразделения
    #        * `1` - Система управления
    #        * `2` - Орган управления
    #        * `3` - Пункт управления
    #        * `4` - Подразделение
    EventBase:
      properties:
        unitId:
          type: integer
          format: int64
          description: "Id подразделения
                (может ссылаться только на подразделение 4-го уровня)"
        dateFrom:
          type: string
          format: date
          description: "Дата начала события"
        dateTo:
          type: string
          format: date
          description: "Дата конца события"
        location:
          $ref: "#/components/schemas/Location"
        planned:
          type: boolean
          default: false
          description: "Запланированность события"
        note:
          type: string
          description: "Примечание"
        eventTypeId:
          $ref: "#/components/schemas/EventTypeId"
    EventBaseReq:
      required:
        - dateFrom
        - eventTypeId
        - unitId
        - location
        - planned
      properties:
        unitId:
          type: integer
          format: int64
          description: "Id подразделения
                (может ссылаться только на подразделение 4-го уровня)"
        dateFrom:
          type: string
          format: date
          description: "Дата начала события"
        dateTo:
          type: string
          format: date
          description: "Дата конца события"
        location:
          $ref: "#/components/schemas/Location"
        planned:
          type: boolean
          default: false
          description: "Запланированность события"
        note:
          type: string
          description: "Примечание"
        eventTypeId:
          $ref: "#/components/schemas/EventTypeId"
    EventPut:
      allOf:
        - $ref: "#/components/schemas/EventBase"
    EventPost:
      allOf:
        - $ref: "#/components/schemas/EventBaseReq"
    EventResponse:
      required:
        - eventId
      allOf:
        - properties:
            eventId:
              type: integer
              format: int64
        - $ref: "#/components/schemas/EventBaseReq"
    EventTypePut:
      properties:
        description:
          type: string
          description: "Описание события"
          minLength: 3
        color:
          type: string
          description: "Отображаемый цвет"
          minLength: 3
    EventTypePost:
      required:
        - description
        - color
      properties:
        description:
          type: string
          description: "Описание события"
          minLength: 3
        color:
          type: string
          description: "Отображаемый цвет"
          minLength: 3
    EventTypeResponse:
      required:
        - description
        - color
        - type
      allOf:
        - $ref: "#/components/schemas/EventTypePut"
        - properties:
            typeId:
              $ref: "#/components/schemas/EventTypeId"
    EventTypeId:
      type: integer
      format: int64
      description: |
        Ссылка на тип события
    CalendarName:
      type: string
      minimum: 2
      maximum: 100
      description: "Наименование календаря"
    Duration:
      type: integer
      format: int32
      minimum: 0
      maximum: 1000
      description: "Длительность события в днях(указывается если длительность по умолчанию не задана либо её надо изменить)"
    DurationOptional:
      properties:
        duration:
          $ref: "#/components/schemas/Duration"
    DurationRequired:
      required:
        - duration
      properties:
        duration:
          $ref: "#/components/schemas/Duration"
    EventDurationPut:
      allOf:
        - $ref: "#/components/schemas/DurationRequired"
    EventDurationResponse:
      required:
        - unitId
        - eventTypeId
        - duration
      allOf:
        - $ref: "#/components/schemas/EventDurationPut"
        - properties:
            unitId:
              type: integer
              format: int64
            eventTypeId:
              $ref: "#/components/schemas/EventTypeId"
    EventDurationMap:
      description: "key - eventDurationType, value - duration"
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Duration"
    
    Period:
      type: object
      required:
        - name
        - startDate
        - endDate
      properties:
        name:
          type: string
          description: "Название периода"
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    PeriodResponse:
      required:
        - periodId
      allOf:
        - $ref: "#/components/schemas/Period"
        - properties:
            periodId:
              type: integer
              format: int64
    
    PeriodPost:
      allOf:
        - $ref: "#/components/schemas/Period"
    
    PeriodPut:
      properties:
        name:
          type: string
          description: "Название периода"
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    
    UserBase:
      properties:
        login:
          type: string
          minLength: 3
        password:
          type: string
          minLength: 5
    UserBaseReq:
      required:
        - login
        - password
      properties:
        login:
          type: string
          minLength: 3
        password:
          type: string
          minLength: 5
    UserPost:
      required:
        - role
      allOf:
        - $ref: "#/components/schemas/UserBaseReq"
        - properties:
            role:
              $ref: '#/components/schemas/Role'
    UserPut:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - properties:
            role:
              $ref: '#/components/schemas/Role'
    UserResponse:
      required:
        - token
        - login
        - role
      allOf:
        - properties:
            token:
              type: string
              format: uuid
            login:
              type: string
              minLength: 3
            role:
              $ref: '#/components/schemas/Role'
    Role:
      type: string
      enum:
        - superuser
        - admin
        - user
        - anonym
    Location:
      type: object
      properties:
        name:
          type: string
          description: "Название нас. пункта"
        type:
          type: string
          description: |
            Тип локации
            * `statical` - Стационар
            * `district` - Район
          enum:
            - statical
            - district
    CalendarBase:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/CalendarName"
        shift:
          type: integer
          format: int32
          description: "Сдвиг оперативного времени относительно астрономического"
    CalendarBaseReq:
      type: object
      required:
        - name
        - shift
        - isAstronomical
      properties:
        name:
          $ref: "#/components/schemas/CalendarName"
        shift:
          type: integer
          format: int32
          description: "Сдвиг оперативного времени относительно астрономического"
        isAstronomical:
          type: boolean
          description: |
            Относительно какого времени создаются события?
            * `true` - Астрономическое
            * `false` - Оперативное
    CalendarResponse:
      required:
        - calendarId
      allOf:
        - properties:
            calendarId:
              type: integer
              format: int64
        - $ref: "#/components/schemas/CalendarBaseReq"
    ErrorMessage:
      type: object
      description: "Структура для отправки сообщения об ошибке. userMessage содержит сообщение для пользователя."
      required:
        - code
        - devMessage
      properties:
        code:
          type: string
          description: "Внутренний код ошибки"
        devMessage:
          type: string
          description: "Сообщение для разработчика"
        userMessage:
          type: string
          description: "Сообщение для пользователя"
  
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: UUID