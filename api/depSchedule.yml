openapi: "3.0.0"
info:
  version: 0.1.0
  title: DepSchedule
security:
  - JWT: []
servers:
  - url: http://localhost:9006/api

tags:
  - name: event
    description: "Информация о событии (подразделение, дата начала, дата конца)"
  - name: eventType
    description: "Информация о типе событий (цвет, описание)"
  - name: unit
    description: "Информация о подразделении (название, уровень подразделения)"
  - name: eventDuration
    description: 'Информация о времени выполнения событий в каждом подразделении'
  - name: user
    description: 'Действия с пользователями системы'
  - name: period
    description: "Информация о периодах (High Level Section)"
paths:
  /event:
    get:
      operationId: eventGet
      summary: Список событий
      tags:
        - event
      parameters:
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: Array of event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: eventPost
      summary: Создать событие
      tags:
        - event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventPost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /event/{eventId}:
    put:
      operationId: eventPut
      summary: Редактировать существующее событие
      tags:
        - event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: eventDelete
      summary: Удалить существующее событие
      tags:
        - event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventType:
    get:
      operationId: eventTypeGet
      summary: Список типов событий
      tags:
        - eventType
      responses:
        200:
          description: Array of event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventTypeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: eventTypePost
      summary: Добавить тип события
      tags:
        - eventType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventTypePost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventType/{eventTypeId}:
    put:
      operationId: eventTypePut
      summary: Редактировать существующий тип события
      tags:
        - eventType
      parameters:
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventTypePut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: eventTypeDelete
      summary: Удалить существующий тип события
      tags:
        - eventType
      parameters:
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /unit:
    get:
      deprecated: true
      operationId: unitGet
      summary: Список подразделений
      tags:
        - unit
      responses:
        200:
          description: Array of unit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: unitPost
      summary: Создать подразделение
      tags:
        - unit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitPost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /unit/{unitId}:
    put:
      operationId: unitPut
      summary: Редактировать существующее подразделение
      tags:
        - unit
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: unitDelete
      summary: Удалить существующее подразделение
      tags:
        - unit
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /unit/tree:
    get:
      operationId: unitGetTree
      summary: Древовидный список подразделений со списком событий
      tags:
        - unit
      parameters:
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: Array of unit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitResponseTree"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventDuration:
    get:
      operationId: eventDurationGet
      summary: Получить время выполнения событий для подразделения
      tags:
        - eventDuration
      parameters:
        - name: unitId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventDurationResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /eventDuration/{unitId}/{eventTypeId}:
    put:
      operationId: eventDurationPut
      summary: Добавить/Редактировать существующее время выполнения события для подразделения
      tags:
        - eventDuration
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventDurationPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventDurationResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: eventDurationDelete
      summary: Удалить существующее время выполнения события для подразделения
      tags:
        - eventDuration
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: eventTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EventTypeId"
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user/register:
    post:
      operationId: register
      summary: Регистрация нового пользователя
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/login:
    put:
      operationId: login
      summary: Вход пользователя в систему
      tags:
        - user
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/logout:
    put:
      operationId: logout
      summary: Выход пользователя из системы
      tags:
        - user
      responses:
        200:
          description: successful operation
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/{login}:
    put:
      operationId: userPut
      summary: Редактировать существующего пользователя
      tags:
        - user
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: userDelete
      summary: Удалить существующего пользователя
      tags:
        - user
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /period:
    get:
      operationId: periodGet
      summary: Список периодов
      tags:
        - period
      responses:
        200:
          description: Array of event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PeriodResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: periodPost
      summary: Добавить период
      tags:
        - period
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PeriodPost"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeriodResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /period/{periodId}:
    put:
      operationId: periodPut
      summary: Редактировать существующие периоды
      tags:
        - period
      parameters:
        - name: periodId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PeriodPut"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeriodResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: periodDelete
      summary: Удалить существующий период
      tags:
        - period
      parameters:
        - name: periodId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
  schemas:
    UnitPut:
      properties:
        title:
          type: string
          minLength: 2
          description: "Название подразделения"
        parentId:
          type: integer
          format: int64
          description: |
            Ссылка на подразделение верхнего уровня
            (для подразделения первого уровня не указывается!)
#        unitLevel:
#          $ref: "#/components/schemas/UnitLevel"
    UnitPost:
      required:
        - title
      properties:
        title:
          type: string
          minLength: 2
          description: "Название подразделения"
        parentId:
          type: integer
          format: int64
          description: |
            Ссылка на подразделение верхнего уровня
            (для подразделения первого уровня не указывается!)
#        unitLevel:
#          $ref: "#/components/schemas/UnitLevel"
    UnitResponse:
      required:
        - unitId
        - title
#        - unitLevel
      allOf:
        - $ref: "#/components/schemas/UnitPut"
        - properties:
            unitId:
              type: integer
              format: int64
    UnitResponseTree:
      description: "Узел дерева. Содержит информацию о подразделении"
      required:
        - unitId
        - title
      allOf:
        - $ref: "#/components/schemas/UnitPut"
        - properties:
            unitId:
              type: integer
              format: int64
            events:
              type: array
              items:
                $ref: "#/components/schemas/EventResponse"
            childUnit:
              type: array
              items:
                $ref: "#/components/schemas/UnitResponseTree"
            eventDuration:
              $ref: "#/components/schemas/EventDurationMap"
#    UnitLevel:
#      type: integer
#      format: int32
#      description: |
#        Уровень подразделения
#        * `1` - Система управления
#        * `2` - Орган управления
#        * `3` - Пункт управления
#        * `4` - Подразделение
    EventBase:
      properties:
        unitId:
          type: integer
          format: int64
          description: "Id подразделения
            (может ссылаться только на подразделение 4-го уровня)"
        dateFrom:
          type: string
          format: date
          description: "Дата начала события"
        note:
          type: string
          description: "Примечание"
        eventTypeId:
          $ref: "#/components/schemas/EventTypeId"
    EventBaseReq:
      required:
        - dateFrom
        - eventTypeId
        - unitId
      properties:
        unitId:
          type: integer
          format: int64
          description: "Id подразделения
            (может ссылаться только на подразделение 4-го уровня)"
        dateFrom:
          type: string
          format: date
          description: "Дата начала события"
        note:
          type: string
          description: "Примечание"
        eventTypeId:
          $ref: "#/components/schemas/EventTypeId"
    EventPut:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - $ref: "#/components/schemas/DurationOptional"
    EventPost:
      allOf:
        - $ref: "#/components/schemas/EventBaseReq"
        - $ref: "#/components/schemas/DurationOptional"
    EventResponse:
      required:
        - eventId
      allOf:
        - properties:
            eventId:
              type: integer
              format: int64
        - $ref: "#/components/schemas/EventBaseReq"
        - $ref: "#/components/schemas/DurationRequired"
    EventTypePut:
      properties:
        description:
          type: string
          description: "Описание события"
          minLength: 3
        color:
          type: string
          description: "Отображаемый цвет"
          minLength: 3
    EventTypePost:
      required:
        - description
        - color
      properties:
        description:
          type: string
          description: "Описание события"
          minLength: 3
        color:
          type: string
          description: "Отображаемый цвет"
          minLength: 3
    EventTypeResponse:
      required:
        - description
        - color
        - type
      allOf:
        - $ref: "#/components/schemas/EventTypePut"
        - properties:
            typeId:
              $ref: "#/components/schemas/EventTypeId"
    EventTypeId:
      type: integer
      format: int64
      description: |
        Ссылка на тип события
    Duration:
      type: integer
      format: int32
      minimum: 0
      maximum: 1000
      description: "Длительность события в днях(указывается если длительность по умолчанию не задана либо её надо изменить)"
    DurationOptional:
      properties:
        duration:
          $ref: "#/components/schemas/Duration"
    DurationRequired:
      required:
        - duration
      properties:
        duration:
          $ref: "#/components/schemas/Duration"
    EventDurationPut:
      allOf:
        - $ref: "#/components/schemas/DurationRequired"
    EventDurationResponse:
      required:
        - unitId
        - eventTypeId
        - duration
      allOf:
        - $ref: "#/components/schemas/EventDurationPut"
        - properties:
            unitId:
              type: integer
              format: int64
            eventTypeId:
              $ref: "#/components/schemas/EventTypeId"
    EventDurationMap:
      description: "key - eventDurationType, value - duration"
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Duration"

    Period:
      type: object
      required:
        - name
        - startDate
        - endDate
      properties:
        name:
          type: string
          description: "Название периода"
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    PeriodResponse:
      required:
        - periodId
      allOf:
        - $ref: "#/components/schemas/Period"
        - properties:
            periodId:
              type: integer
              format: int64

    PeriodPost:
      allOf:
        - $ref: "#/components/schemas/Period"

    PeriodPut:
      properties:
        name:
          type: string
          description: "Название периода"
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    UserPost:
      required:
        - login
        - role
        - password
      properties:
        password:
          type: string
          minLength: 5
        login:
          type: string
          minLength: 3
        role:
          $ref: '#/components/schemas/Role'
    UserPut:
      properties:
        password:
          type: string
          minLength: 5
        login:
          type: string
          minLength: 3
        role:
          $ref: '#/components/schemas/Role'
    UserResponse:
      required:
        - token
        - login
        - role
      allOf:
        - properties:
            token:
              type: string
              format: uuid
            login:
              type: string
              minLength: 3
            role:
              $ref: '#/components/schemas/Role'
    Role:
      type: string
      enum:
        - superuser
        - admin
        - user
        - anonym

    ErrorMessage:
      type: object
      description: "Структура для отправки сообщения об ошибке. userMessage содержит сообщение для пользователя."
      required:
        - code
        - devMessage
      properties:
        code:
          type: string
          description: "Внутренний код ошибки"
        devMessage:
          type: string
          description: "Сообщение для разработчика"
        userMessage:
          type: string
          description: "Сообщение для пользователя"

  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
