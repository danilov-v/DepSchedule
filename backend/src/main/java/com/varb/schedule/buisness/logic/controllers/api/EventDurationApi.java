/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.varb.schedule.buisness.logic.controllers.api;

import com.varb.schedule.buisness.models.dto.EventDurationDto;
import io.swagger.annotations.*;
import org.modelmapper.spi.ErrorMessage;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-07-25T17:34:50.890917+03:00[Europe/Minsk]")
@Api(value = "eventDuration", description = "the eventDuration API")
public interface EventDurationApi {

    @ApiOperation(value = "Получить время выполнения события для подразделения", nickname = "eventDurationGet", notes = "", response = EventDurationDto.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")    }, tags={ "time", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = EventDurationDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessage.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessage.class) })
    @RequestMapping(value = "/eventDuration",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<EventDurationDto>> eventDurationGet();


    @ApiOperation(value = "Добавить время выполнения события для подразделения", nickname = "eventDurationPost", notes = "", response = EventDurationDto.class, authorizations = {
        @Authorization(value = "JWT")    }, tags={ "time", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = EventDurationDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessage.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessage.class) })
    @RequestMapping(value = "/eventDuration",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<EventDurationDto> eventDurationPost(@ApiParam(value = "") @Valid @RequestBody EventDurationDto body);


    @ApiOperation(value = "Редактировать существующее время выполнения события для подразделения", nickname = "eventDurationPut", notes = "", response = EventDurationDto.class, authorizations = {
        @Authorization(value = "JWT")    }, tags={ "time", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = EventDurationDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessage.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessage.class) })
    @RequestMapping(value = "/eventDuration",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<EventDurationDto> eventDurationPut(@ApiParam(value = "") @Valid @RequestBody EventDurationDto body);


    @ApiOperation(value = "Удалить существующее время выполнения события для подразделения", nickname = "eventDurationUnitIdEventTypeDelete", notes = "", authorizations = {
        @Authorization(value = "JWT")    }, tags={ "time", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessage.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessage.class) })
    @RequestMapping(value = "/eventDuration/{unitId}/{eventType}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> eventDurationUnitIdEventTypeDelete(@ApiParam(value = "", required = true) @PathVariable("unitId") Long unitId, @ApiParam(value = "", required = true) @PathVariable("eventType") String eventType);

}
