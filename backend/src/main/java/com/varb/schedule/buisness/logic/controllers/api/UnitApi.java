/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.varb.schedule.buisness.logic.controllers.api;

import com.varb.schedule.buisness.models.dto.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-07-26T15:47:59.539438+03:00[Europe/Minsk]")
@Api(value = "unit", description = "the unit API")
public interface UnitApi {

    @ApiOperation(value = "Удалить существующее подразделение", nickname = "unitDelete", notes = "", authorizations = {
        @Authorization(value = "JWT")    }, tags={ "unit", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessageDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessageDto.class) })
    @RequestMapping(value = "/unit/{unitId}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> unitDelete(@ApiParam(value = "", required = true) @PathVariable("unitId") Long unitId);


    @ApiOperation(value = "Список подразделений", nickname = "unitGet", notes = "", response = UnitResponseDto.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")    }, tags={ "unit", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Array of unit", response = UnitResponseDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessageDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessageDto.class) })
    @RequestMapping(value = "/unit",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<UnitResponseDto>> unitGet();


    @ApiOperation(value = "Список подразделений", nickname = "unitGetThree", notes = "", response = UnitResponseThreeDto.class, responseContainer = "List", authorizations = {
        @Authorization(value = "JWT")    }, tags={ "unit", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Array of unit", response = UnitResponseThreeDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessageDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessageDto.class) })
    @RequestMapping(value = "/unit/three",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<UnitResponseThreeDto> unitGetThree();


    @ApiOperation(value = "Создать подразделение", nickname = "unitPost", notes = "", response = UnitResponseDto.class, authorizations = {
        @Authorization(value = "JWT")    }, tags={ "unit", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = UnitResponseDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessageDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessageDto.class) })
    @RequestMapping(value = "/unit",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UnitResponseDto> unitPost(@ApiParam(value = "") @Valid @RequestBody UnitPostDto unitPostDto);


    @ApiOperation(value = "Редактировать существующее подразделение", nickname = "unitPut", notes = "", response = UnitResponseDto.class, authorizations = {
        @Authorization(value = "JWT")    }, tags={ "unit", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = UnitResponseDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorMessageDto.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorMessageDto.class) })
    @RequestMapping(value = "/unit/{unitId}",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<UnitResponseDto> unitPut(@ApiParam(value = "", required = true) @PathVariable("unitId") Long unitId, @ApiParam(value = "") @Valid @RequestBody UnitPutDto unitPutDto);

}
