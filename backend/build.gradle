buildscript {
    dependencies {
        classpath 'com.google.guava:guava:28.1-jre'
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'idea'
    //id 'nebula.lint' version '9.3.2' //контроль неиспользуемых зпависимостей
}

sourceCompatibility = '12'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//Устанавливаем профиль SpringBoot
if (hasProperty('profile')) {
    def profile = project.getProperties().get('profile')
    bootRun {
        systemProperties = [
                'spring.profiles.active': profile
        ]
    }

    classes {
        doLast {
            FileTree tree =
                    fileTree(dir: "build/resources/main").
                            include("application.yml") as FileTree
            tree.each {
                File file ->
                    insertAtTheBeginningOfFile(file, 'spring.profiles.active: ' + profile)
            }
        }
    }
}

/**
 * Insert String at the beginning of File
 */
ext.insertAtTheBeginningOfFile = { File file, String str ->
    def oldFile = file
    def newFile = File.createTempFile("application_yml", UUID.randomUUID().toString())

    newFile.withWriter { output ->
        output.write(str)
        output.write("\n")
        oldFile.eachLine { line ->
            output.write(line)
            output.write("\n")
        }
    }
    com.google.common.io.Files.move(newFile, oldFile)
}

compileJava {
    //Generate Controllers and Dto based OpenApi Spec
    dependsOn(':backend:openapi_codegen:generateCode')

    options.compilerArgs << '-parameters'
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.modelmapper:modelmapper:2.3.5'
    implementation 'org.apache.commons:commons-text:1.7'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.liquibase:liquibase-core:3.8.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
    //support openApi codegen annotation
    compileOnly 'io.swagger:swagger-annotations:1.5.22'
    compileOnly 'org.openapitools:jackson-databind-nullable:0.1.0'

    /*
    For boot Project with FrontEnd use command
    ==============================
    ./gradlew bootRun -PwithFront
    ==============================
    */
    if (project.hasProperty("withFront"))
        runtimeOnly project(':schedule_ui')
}
